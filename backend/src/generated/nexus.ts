/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import * as photon from "@prisma/photon"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  UserRole: photon.UserRole
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Author: photon.Author;
  Book: photon.Book;
  Comment: photon.Comment;
  Genre: photon.Genre;
  Mutation: {};
  Query: {};
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  UserRole: NexusGenEnums['UserRole'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Author: { // field return type
    books: NexusGenRootTypes['Book'][]; // [Book!]!
    id: string; // ID!
    name: string; // String!
  }
  Book: { // field return type
    authors: NexusGenRootTypes['Author'][]; // [Author!]!
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    coverUrl: string | null; // String
    description: string | null; // String
    genres: NexusGenRootTypes['Genre'][]; // [Genre!]!
    id: string; // ID!
    isbn: string | null; // String
    name: string; // String!
  }
  Comment: { // field return type
    book: NexusGenRootTypes['Book']; // Book!
    content: string; // String!
    id: string; // ID!
    rating: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Genre: { // field return type
    books: NexusGenRootTypes['Book'][]; // [Book!]!
    id: string; // ID!
    name: string; // String!
  }
  Mutation: { // field return type
    createAuthor: NexusGenRootTypes['Author']; // Author!
    createBook: NexusGenRootTypes['Book']; // Book!
    createComment: NexusGenRootTypes['Comment']; // Comment!
    createGenre: NexusGenRootTypes['Genre']; // Genre!
    deleteBook: NexusGenRootTypes['Book']; // Book!
    deleteComment: NexusGenRootTypes['Comment']; // Comment!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateBook: NexusGenRootTypes['Book']; // Book!
    updateComment: NexusGenRootTypes['Comment']; // Comment!
    updateMe: NexusGenRootTypes['User']; // User!
    updatePassword: NexusGenRootTypes['User']; // User!
    upgradeToAdmin: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    getBook: NexusGenRootTypes['Book'] | null; // Book
    getUser: NexusGenRootTypes['User'] | null; // User
    listAuthors: NexusGenRootTypes['Author'][]; // [Author!]!
    listGenres: NexusGenRootTypes['Genre'][]; // [Genre!]!
    me: NexusGenRootTypes['User'] | null; // User
    search: NexusGenRootTypes['Book'][]; // [Book!]!
  }
  User: { // field return type
    bio: string; // String!
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    userRole: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenArgTypes {
  Author: {
    books: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  Book: {
    authors: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    comments: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    genres: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  Genre: {
    books: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  Mutation: {
    createAuthor: { // args
      name: string; // String!
    }
    createBook: { // args
      authors?: string[] | null; // [ID!]
      coverUrl?: string | null; // String
      description?: string | null; // String
      genres?: string[] | null; // [ID!]
      isbn?: string | null; // String
      name: string; // String!
    }
    createComment: { // args
      bookId: string; // ID!
      content: string; // String!
      rating: number; // Int!
    }
    createGenre: { // args
      name: string; // String!
    }
    deleteBook: { // args
      id: string; // ID!
    }
    deleteComment: { // args
      id: string; // ID!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    updateBook: { // args
      authors?: string[] | null; // [ID!]
      coverUrl?: string | null; // String
      description?: string | null; // String
      genres?: string[] | null; // [ID!]
      id: string; // ID!
      isbn?: string | null; // String
      name?: string | null; // String
    }
    updateComment: { // args
      content?: string | null; // String
      id: string; // ID!
      rating?: number | null; // Int
    }
    updateMe: { // args
      bio?: string | null; // String
      name?: string | null; // String
    }
    updatePassword: { // args
      password: string; // String!
    }
  }
  Query: {
    getBook: { // args
      id: string; // ID!
    }
    getUser: { // args
      email: string; // String!
    }
    search: { // args
      keywords?: string | null; // String
    }
  }
  User: {
    comments: { // args
      after?: string | null; // ID
      before?: string | null; // ID
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Author" | "Book" | "Comment" | "Genre" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "UserRole";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}