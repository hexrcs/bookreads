### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Author {
  books(after: ID, before: ID, first: Int, last: Int, skip: Int): [Book!]!
  id: ID!
  name: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Book {
  authors(after: ID, before: ID, first: Int, last: Int, skip: Int): [Author!]!
  comments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Comment!]!
  coverUrl: String
  description: String
  genres(after: ID, before: ID, first: Int, last: Int, skip: Int): [Genre!]!
  id: ID!
  isbn: String
  name: String!
}

type Comment {
  book: Book!
  content: String!
  id: ID!
  rating: Int!
  user: User!
}

type Genre {
  books(after: ID, before: ID, first: Int, last: Int, skip: Int): [Book!]!
  id: ID!
  name: String!
}

type Mutation {
  createAuthor(name: String!): Author!
  createBook(authors: [ID!], coverUrl: String, description: String, genres: [ID!], isbn: String, name: String!): Book!
  createComment(bookId: ID!, content: String!, rating: Int!): Comment!
  createGenre(name: String!): Genre!
  deleteBook(id: ID!): Book!
  deleteComment(id: ID!): Comment!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!): AuthPayload!
  updateBook(authors: [ID!], coverUrl: String, description: String, genres: [ID!], id: ID!, isbn: String, name: String): Book!
  updateComment(content: String, id: ID!, rating: Int): Comment!
  updateMe(bio: String, name: String): User!
  updatePassword(password: String!): User!
  upgradeToAdmin: User!
}

type Query {
  getBook(id: ID!): Book
  getUser(email: String!): User
  listAuthors: [Author!]!
  listGenres: [Genre!]!
  me: User
  search(keywords: String): [Book!]!
}

type User {
  bio: String!
  comments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Comment!]!
  email: String!
  id: ID!
  name: String!
  userRole: UserRole!
}

enum UserRole {
  ADMIN
  USER
}
